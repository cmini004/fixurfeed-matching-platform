import emailjs from '@emailjs/browser';
import { EMAILJS_CONFIG } from '../config/emailjs';

interface Creator {
  id: string;
  name: string;
  avatar: string;
  role: string;
  linkedinUrl: string | null;
  instagramUrl: string | null;
  tiktokUrl: string | null;
  knownFor: string;
  followers_detail?: Record<string, number>;
}

interface EmailData {
  email: string;
  matches: Creator[];
  quizResponses?: any;
}

class EmailService {
  // Option 1: Simple mailto solution
  static sendViaMailto(data: EmailData): void {
    const { email, matches } = data;
    
    const subject = encodeURIComponent("Your FixUrFeed Creator Matches ðŸŽ¯");
    
    const body = this.generateEmailBody(matches);
    const encodedBody = encodeURIComponent(body);
    
    const mailtoUrl = `mailto:${email}?subject=${subject}&body=${encodedBody}`;
    
    // Open user's email client
    window.open(mailtoUrl);
  }

  // Option 2: EmailJS integration
  static async sendViaEmailJS(data: EmailData): Promise<boolean> {
    try {
      // EmailJS configuration from config file
      const { SERVICE_ID, TEMPLATE_ID, PUBLIC_KEY } = EMAILJS_CONFIG;
      
      const templateParams = {
        to_email: data.email,
        to_name: 'FixUrFeed User',
        subject: "Your FixUrFeed Creator Matches ðŸŽ¯",
        creators_list: this.generateCreatorsList(data.matches),
        html_content: this.generateHTMLEmailBody(data.matches),
      };

      const result = await emailjs.send(
        SERVICE_ID, 
        TEMPLATE_ID, 
        templateParams,
        PUBLIC_KEY
      );

      console.log('Email sent successfully:', result);
      return true;
    } catch (error) {
      console.error('Failed to send email via EmailJS:', error);
      return false;
    }
  }

  // Option 3: Copy to clipboard as fallback
  static copyToClipboard(data: EmailData): void {
    const content = this.generateEmailBody(data.matches);
    navigator.clipboard.writeText(content).then(() => {
      alert('Your creator matches have been copied to clipboard! You can paste this into an email to yourself.');
    }).catch(err => {
      console.error('Failed to copy to clipboard:', err);
    });
  }

  private static generateCreatorsList(matches: Creator[]): string {
    return matches.map((creator, index) => `${index + 1}. ${creator.name} - ${creator.role} (${creator.linkedinUrl || 'No LinkedIn'})`).join('\n');
  }

  private static generateEmailBody(matches: Creator[]): string {
    const body = `Hi there! ðŸ‘‹

Here are your personalized creator matches from FixUrFeed:

${matches.map((creator, index) => `
${index + 1}. ${creator.name}
   Role: ${creator.role}
   Known for: ${creator.knownFor}
   LinkedIn: ${creator.linkedinUrl || 'Not available'}
   Instagram: ${creator.instagramUrl || 'Not available'}
   TikTok: ${creator.tiktokUrl || 'Not available'}
   
`).join('')}

These creators were selected based on your quiz responses to help you grow in your tech and career journey.

Start following them today! ðŸš€

---
Generated by FixUrFeed.com
Your personalized creator discovery platform`;

    return body;
  }

  private static generateHTMLEmailBody(matches: Creator[]): string {
    return `
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; }
        .creator-card { border: 1px solid #ddd; border-radius: 8px; padding: 15px; margin: 15px 0; }
        .creator-name { font-size: 18px; font-weight: bold; color: #667eea; }
        .creator-role { color: #666; font-style: italic; margin: 5px 0; }
        .social-links { margin: 10px 0; }
        .social-links a { color: #667eea; text-decoration: none; margin-right: 15px; }
        .footer { background: #f8f9fa; padding: 20px; text-align: center; margin-top: 30px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>ðŸŽ¯ Your FixUrFeed Creator Matches</h1>
        <p>Personalized recommendations for your tech and career journey</p>
    </div>
    
    <div style="padding: 20px;">
        <p>Hi there! ðŸ‘‹</p>
        <p>Here are your personalized creator matches based on your quiz responses:</p>
        
        ${matches.map((creator, index) => `
        <div class="creator-card">
            <div class="creator-name">${index + 1}. ${creator.name}</div>
            <div class="creator-role">${creator.role}</div>
            <p><strong>Known for:</strong> ${creator.knownFor}</p>
            <div class="social-links">
                ${creator.linkedinUrl ? `<a href="${creator.linkedinUrl}" target="_blank">ðŸ’¼ LinkedIn</a>` : ''}
                ${creator.instagramUrl ? `<a href="${creator.instagramUrl}" target="_blank">ðŸ“¸ Instagram</a>` : ''}
                ${creator.tiktokUrl ? `<a href="${creator.tiktokUrl}" target="_blank">ðŸŽµ TikTok</a>` : ''}
            </div>
        </div>
        `).join('')}
        
        <p>Start following them today to level up your career! ðŸš€</p>
    </div>
    
    <div class="footer">
        <p>Generated by <strong>FixUrFeed.com</strong></p>
        <p>Your personalized creator discovery platform</p>
    </div>
</body>
</html>`;
  }

  // Smart email sending that tries multiple methods
  static async sendMatches(data: EmailData): Promise<void> {
    // Check if EmailJS is properly configured
    const { SERVICE_ID, TEMPLATE_ID, PUBLIC_KEY } = EMAILJS_CONFIG;
    
    if (PUBLIC_KEY !== 'YOUR_PUBLIC_KEY_HERE') {
      try {
        // Try EmailJS first if configured
        const emailJSSuccess = await this.sendViaEmailJS(data);
        
        if (emailJSSuccess) {
          alert('âœ… Email sent successfully to ' + data.email);
          return;
        }
      } catch (error) {
        console.warn('EmailJS failed:', error);
      }
    } else {
      console.info('EmailJS not configured, using fallback methods');
    }

    // Fallback to mailto
    try {
      this.sendViaMailto(data);
      alert('ðŸ“§ Opening your email client to send matches to ' + data.email);
    } catch (error) {
      console.warn('Mailto failed, using clipboard fallback');
      this.copyToClipboard(data);
    }
  }
}

export { EmailService, type EmailData };